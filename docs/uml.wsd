@startuml "Benchmark Protocol"
' -- for auto-render install: https://marketplace.visualstudio.com/items?itemName=jebbs.plantuml
' -- options --

' -- classes --

package "User Facing" <<Folder>>  {

	class Benchmark {
		' -- inheritance --
		{abstract}IBenchmark
		{abstract}Permissions

		' -- usingFor --
		{abstract}📚SafeMath for [[uint256]]

		' -- vars --
		+[[IBenchmarkData]] data
		+[[IBenchmarkFactory]] factory
		+[[IBenchmarkProvider]] provider
		+[[address]] weth
		+[[address]] treasury
		-[[address]] initializer

		' -- methods --
		+💰**__constructor__**()
		+initialize()
		+setContracts()
		+redeemAfterExpiry()
		+redeemUnderlying()
		+renew()
		+tokenizeYield()
		+addMarketLiquidity()
		+💰addMarketLiquidityETH()
		+removeMarketLiquidity()
		+removeMarketLiquidityETH()
		+swapTokenToToken()
		+💰swapEthToToken()
		+swapTokenToEth()
		+🔍getDestAmount()
		+🔍getSrcAmount()
		+🔍getDestAmounts()
		+🔍getSrcAmounts()
		+🔍getMarketRate()

	}

	class BenchmarkFactory {
    ' -- inheritance --
		{abstract}IBenchmarkFactory
		{abstract}Permissions

			' -- usingFor --

			' -- vars --
		+[[IBenchmark]] core
		+[[IForgeCreator]] forgeCreator
		+[[IMarketCreator]] marketCreator
		-[[address]] allForges
		-[[address]] allMarkets
		-[[address]] initializer

			' -- methods --
		+**__constructor__**()
		+initialize()
		+createForge()
		+createMarket()
		+setCore()
		+🔍allForgesLength()
		+🔍getAllForges()
		+🔍allMarketsLength()
		+🔍getAllMarkets()
	}
}

class BenchmarkData {
	' -- inheritance --
	{abstract}IBenchmarkData
	{abstract}Permissions

	' -- vars --
	+[[mapping address=>mapping address=>address  ]] getForge
	+[[mapping address=>mapping address=>address  ]] getMarket
	+[[address]] core
	-[[address]] initializer

	' -- methods --
	+**__constructor__**()
	+initialize()
	+setCore()
	+addForge()
	+addMarket()
}

class BenchmarkProvider {
	' -- inheritance --
	{abstract}IBenchmarkProvider
	{abstract}Permissions

	' -- vars --
	+[[address]] aaveLendingPoolCore

	' -- methods --
	+**__constructor__**()
	+setAaveAddress()
	+🔍getATokenAddress()
}

class BenchmarkForge {
    ' -- inheritance --
	{abstract}IBenchmarkForge
	{abstract}ReentrancyGuard

    ' -- usingFor --

    ' -- vars --
	+[[address]] core
	+[[address]] factory
	+[[address]] underlyingAsset
	+[[address]] underlyingYieldToken
	+[[IBenchmarkProvider]] provider
	+[[mapping uint256=>address ]] otTokens
	+[[mapping uint256=>address ]] xytTokens
	+[[mapping uint256=>uint256 ]] lastNormalisedIncomeBeforeExpiry
	+[[mapping uint256=>mapping address=>uint256  ]] lastNormalisedIncome

    ' -- methods --
	+**__constructor__**()
	+redeemDueInterests()
	+redeemDueInterestsBeforeTransfer()
	+redeemAfterExpiry()
	+redeemUnderlying()
	+tokenizeYield()
	+newYieldContracts()
	+🔍getAllXYTFromExpiry()
	+🔍getAllOTFromExpiry()
	#🔍_getTokens()
	#_settleDueInterests()
	#_forgeFutureYieldToken()
	#_forgeOwnershipToken()
}

class BenchmarkMarket {
    ' -- inheritance --
	{abstract}IBenchmarkMarket
	{abstract}BenchmarkBaseToken

    ' -- usingFor --

    ' -- vars --
	+[[address]] core
	+[[address]] factory
	+[[address]] token
	+[[address]] xyt
	+[[IBenchmarkProvider]] provider
	+{static}[[uint256]] minLiquidity
	-{static}[[string]] _name
	-{static}[[string]] _symbol
	-{static}[[uint8]] _decimals

    ' -- methods --
	+**__constructor__**()
	+🔍getReserves()
	+swap()
}

class ForgeCreator {
    ' -- inheritance --
	{abstract}IForgeCreator

    ' -- usingFor --

    ' -- vars --
	+[[IBenchmarkProvider]] provider
	+[[address]] core
	+[[address]] factory
	-[[address]] initializer

    ' -- methods --
	+**__constructor__**()
	+initialize()
	+create()
}

class MarketCreator {
    ' -- inheritance --
	{abstract}IMarketCreator

    ' -- usingFor --

    ' -- vars --
	+[[IBenchmarkProvider]] provider
	+[[address]] core
	+[[address]] factory
	-[[address]] initializer

    ' -- methods --
	+**__constructor__**()
	+initialize()
	+create()
}

package "Yield Tokens" {
	class BenchmarkOwnershipToken {
		' -- inheritance --
		{abstract}BenchmarkBaseToken

		' -- usingFor --

		' -- vars --
		+[[address]] name
		+[[address]] symbol
		+[[address]] decimals
		+[[address]] expiry
		+[[address]] forge
		+[[address]] underlyingAsset
		+[[address]] underlyingYieldToken
		+[[address]] xyt

		' -- methods --
		+**__constructor__**()

	}

	class BenchmarkFutureYieldToken {
		' -- inheritance --
		{abstract}BenchmarkBaseToken

		' -- usingFor --

		' -- vars --
		+[[address]] name
		+[[address]] symbol
		+[[address]] decimals
		+[[address]] expiry
		+[[address]] forge
		+[[address]] underlyingAsset
		+[[address]] underlyingYieldToken
		+[[address]] ot

		' -- methods --
		+**__constructor__**()

	}
}

package "Governance" {
	class BenchmarkGovernance {
		' -- inheritance --
		' -- usingFor --
		' -- vars --
		' -- methods --
	}

	class BenchmarkTreasury {
		' -- inheritance --
		' -- usingFor --
		' -- vars --
		' -- methods --
	}

	class BMK {
		' -- inheritance --
		' -- usingFor --
		' -- vars --
		' -- methods --
	}
}


' -- interfaces --
' interface IBenchmarkData {
' 	' -- methods --
' 	+🔍core()
' 	+setCore()
' 	+🔍getForge()
' 	+addForge()
' 	+🔍getMarket()
' 	+addMarket()
' }

' -- inheritance --
' IBenchmark --[#DarkGoldenRod]|> Benchmark
' Permissions --[#DarkGoldenRod]|> Benchmark
' SafeMath ..[#DarkOliveGreen]|> Benchmark : //for uint256//

' IBenchmarkFactory --[#DarkGoldenRod]|> BenchmarkFactory
' Permissions --[#DarkGoldenRod]|> BenchmarkFactory

' IBenchmarkData --[#DarkGoldenRod]|> BenchmarkData
' Permissions --[#DarkGoldenRod]|> BenchmarkData

' IBenchmarkProvider --[#DarkGoldenRod]|> BenchmarkProvider
' Permissions --[#DarkGoldenRod]|> BenchmarkProvider

' IBenchmarkForge --[#DarkGoldenRod]|> BenchmarkForge
' ReentrancyGuard --[#DarkGoldenRod]|> BenchmarkForge

' IBenchmarkMarket --[#DarkGoldenRod]|> BenchmarkMarket

' BenchmarkBaseToken --[#DarkGoldenRod]|> BenchmarkOwnershipToken
' BenchmarkBaseToken --[#DarkGoldenRod]|> BenchmarkFutureYieldToken


' -- creation --
BenchmarkFactory *--[#Red]|> ForgeCreator
BenchmarkFactory *--[#Red]|> MarketCreator
ForgeCreator *--[#Red]|> BenchmarkForge : creates
MarketCreator *--[#Red]|> BenchmarkMarket : creates

' -- data --
BenchmarkData <--[#Magenta]--> Benchmark : read/write
BenchmarkData <--[#Magenta]--> BenchmarkFactory : read/write

' -- provider --
BenchmarkProvider --[#Magenta]--> BenchmarkFactory : reads
BenchmarkProvider --[#Magenta]--> BenchmarkForge : reads
BenchmarkProvider --[#Magenta]--> BenchmarkMarket : reads

' -- tokenization --
Benchmark <--[#Blue]--> BenchmarkForge : "tokenize/redeem"
BenchmarkForge *--[#Blue]|> BenchmarkOwnershipToken : tokenizes
BenchmarkForge *--[#Blue]|> BenchmarkFutureYieldToken : tokenizes

' -- trading --
Benchmark <--[#Blue]--> BenchmarkMarket : "trading"
BenchmarkMarket --[#Blue]--> BenchmarkTreasury : "fees"

' -- governance --
BMK ..[#Green]..> BenchmarkGovernance : voting
BenchmarkGovernance ..[#GreenYellow]..> Benchmark : governs
BenchmarkGovernance ..[#GreenYellow]..> BenchmarkData : governs
BenchmarkGovernance ..[#GreenYellow]..> BenchmarkFactory : governs
BenchmarkGovernance ..[#GreenYellow]..> BenchmarkProvider : governs
BenchmarkGovernance ..[#GreenYellow]..> BenchmarkTreasury : governs

@enduml